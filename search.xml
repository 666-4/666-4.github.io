<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL进阶</title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL进阶"><a href="#MySQL进阶" class="headerlink" title="MySQL进阶"></a>MySQL进阶</h1><h2 id="MySQL体系结构"><a href="#MySQL体系结构" class="headerlink" title="MySQL体系结构"></a>MySQL体系结构</h2><h3 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h3><p>处理客户端的连接，权限认证</p><h3 id="连接层"><a href="#连接层" class="headerlink" title="连接层"></a>连接层</h3><p>SQL接口，解析、优化</p><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><p>MySQL的索引</p><h3 id="存储层"><a href="#存储层" class="headerlink" title="存储层"></a>存储层</h3><p>具体数据存储、文件和日志</p><h2 id="存储引擎-1"><a href="#存储引擎-1" class="headerlink" title="存储引擎"></a>存储引擎</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>存储应请就是存储数据、建立索引、更新&#x2F;查询数据等技术的实现方式。存储引擎是基于表的，而不是基于库的，所以存储引擎也可被称为表类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">show create table 表名 --&gt;查看表结构</span><br><span class="line"></span><br><span class="line"># 创建表时，指定存储引擎</span><br><span class="line">create table 表名 &#123;</span><br><span class="line">字段 字段类型 [comment 字段注释],</span><br><span class="line">......</span><br><span class="line">&#125;engine = innodb [comment 表注释]</span><br><span class="line"></span><br><span class="line">show engines #查看当前数据库支持的存储引擎</span><br></pre></td></tr></table></figure><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><h5 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h5><p>InnoDB是一种兼顾可靠性和高性能的通用存储引擎</p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><p>DML操作遵循ACID模型，支持事务;行级锁，提高并发访问性能</p><p>支持外键FOREIGN KEY约束，保证数据的完整性和正确性；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DML：增删改</span><br><span class="line">ACID：原子性、一致性、隔离性、持久性</span><br></pre></td></tr></table></figure><h5 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h5><p>XXX.ibd: xxx代表的是表名，InnoDB引擎的每张表都会对应这样一个表空间，存储该表的表结构(frm，sdi)、数据和索引。</p><p>参数：innodb_file_per_table</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230307205612521.png" alt="image-20230307205612521"></p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><h4 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h4><p>早期mysql默认的存储引擎</p><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁，访问速度快</li></ul><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><h4 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h4><p>Memory引擎的表数据时存在内存中的，由于受到硬件问题、断电问题的影响，只能将这些表作为临时表</p><h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><p>内存存放</p><p>hash索引</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230307210329173.png" alt="image-20230307210329173"></p><h3 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h3><ul><li>InnoDB：是mysql的默认存储引擎，支持事务、外键。如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，这时候选择InnoDB</li><li>MyISAM：以读和插入操作为主，只有很少的更新和删除操作，并且对事物的完整性、并发性要求不是很高，则选择该存储引擎</li><li>MEMoRy：将所有数据保存在内存内，访问速度快，通常用于临表及缓存。但该缺陷就是对表有限制，太大的表无法在缓存在内存中，而且无法保障数据的安全性。现在都是redis代替了</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h3><p>索引是帮助高效获取数据的数据结构</p><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><p>mysql的索引是在存储引擎层实现的，不同的存储引擎有不同的结构。</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230307211811528.png" alt="image-20230307211811528"></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230307211921557.png" alt="image-20230307211921557"></p><h4 id="B-Tree-多路平衡查找树"><a href="#B-Tree-多路平衡查找树" class="headerlink" title="B-Tree(多路平衡查找树)"></a>B-Tree(多路平衡查找树)</h4><p>以一颗最大度数为5（5）阶的B-tree为例（每个节点最多存储4个key,5个指针）</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230307212509571.png" alt="image-20230307212509571"></p><p><strong>树的度数指的是一个节点的子节点个数</strong></p><h4 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h4><p>MYSQL索引数据结构对经典的B+Tree进行优化。在原B+Tree基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序的指针B+tree，提高区间的访问性能</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230307213157107.png" alt="image-20230307213157107"></p><h3 id="索引语法"><a href="#索引语法" class="headerlink" title="索引语法"></a>索引语法</h3><ul><li><p>创建索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create [unique | fulltext] index_name on table_name (index_col_name,...);</span><br></pre></td></tr></table></figure></li><li><p>查看索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show index from table_name;</span><br></pre></td></tr></table></figure></li><li><p>删除索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index index_name on table_name;</span><br></pre></td></tr></table></figure></li></ul><p>案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、name字段为姓名字段，该字段的值可能会重复，为该字段创建索引</span><br><span class="line">2、phone手机号字段的值，是非空的，且唯一的，为该字段创建唯一索引</span><br><span class="line">3、为profession、age、status创建联合索引</span><br><span class="line">4、为email建立合适的索引来提示查询效率</span><br><span class="line"></span><br><span class="line">create index idx_user_name on user(name);</span><br><span class="line">create unique idx_user_phone on user(phone);</span><br><span class="line">create index idx_user_profession_age_status on user (profession,age,status);</span><br><span class="line">create index idx_email on user (email);</span><br></pre></td></tr></table></figure><h3 id="SQL性能分析"><a href="#SQL性能分析" class="headerlink" title="SQL性能分析"></a>SQL性能分析</h3><ul><li><p>SQL执行频率</p><p>MySQL客户端连接成功后，通过show[session|global] status 命令可以提供服务器状态信息。通过如下指令，可以查看当前数据库的Insert、update、delete、select的访问频次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global status like &#x27;Com_______&#x27;</span><br></pre></td></tr></table></figure></li><li><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time,单位：秒，默认10秒）的所有SQL语句的日志。mysql的慢查询日志默认没有开启，需要在MySQL的配置文件中（&#x2F;etc&#x2F;my.cnf）中配置如下信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#查看慢查询是否开启</span><br><span class="line">show variables like &#x27;slow_query_log&#x27;;</span><br><span class="line"># 开启mysql慢查询日志查询开关</span><br><span class="line">slow_query_log=1;</span><br><span class="line"># 设置慢日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志</span><br><span class="line">slow_query_time=2;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java中的集合和IO流</title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="java进阶"><a href="#java进阶" class="headerlink" title="java进阶"></a>java进阶</h1><h2 id="1-1、List集合体系结构"><a href="#1-1、List集合体系结构" class="headerlink" title="1.1、List集合体系结构"></a>1.1、List集合体系结构</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>添加的元素是有序的、可重复的、有索引</li></ul><h2 id="Collocation"><a href="#Collocation" class="headerlink" title="Collocation"></a>Collocation</h2><p>特点：Collection是单列集合的祖宗接口，它的功能时全部单列集合都可以继承使用的</p><p>Collection是一个接口，不能直接创建它的对象，只能创建它的实现类来调用它的方法</p><p>Collection中底层是依赖equals方法进行判断是否存在的。<strong>equals中判断类型相等的方法是根据引用类型的地址值是否相等来判断的</strong>。所以，如果集合中存储的是自定义对象，也想通过contains方法来判断是否包含，那么在javabean类中，一定要重写equals方法</p><p>Collection中的contain方法中的底层源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the index of the first occurrence of the specified element</span></span><br><span class="line"><span class="comment"> * in this list, or -1 if this list does not contain the element.</span></span><br><span class="line"><span class="comment"> * More formally, returns the lowest index &lt;tt&gt;i&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span></span><br><span class="line"><span class="comment"> * or -1 if there is no such index.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="迭代器遍历"><a href="#迭代器遍历" class="headerlink" title="迭代器遍历"></a>迭代器遍历</h4><p>Iterator<E> intertor() </p><ul><li>迭代器在java中的类是Iterator，迭代器是集合专用的遍历方式</li><li>Collection集合获取迭代器，Iterator<E> intertor()  返回迭代器对象，默认指向当前集合的0索引</li><li>方法名称，boolean hasNext()  ：判断当前位置是 否有元素，有元素返回true，没有元素返回false</li><li>E next()，获取当前位置的元素，并将迭代器对象移向下一个位置</li><li>迭代器在遍历集合的时候是不依赖索引的</li><li>迭代器遍历完毕，指针不会复位，若要复位，则需要重新new 一个迭代器</li><li>迭代器遍历是，不能用集合的方法进行增删</li></ul><h4 id="增强for遍历"><a href="#增强for遍历" class="headerlink" title="增强for遍历"></a>增强for遍历</h4><ul><li><p>增强for的底层就是迭代器</p></li><li><p>所有的单列集合和数组才能用增强for遍历</p><blockquote><p>增强for的细节：修改增强for中的变量，不会修改集合中原本的数据</p></blockquote></li></ul><h4 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><ul><li><p>底层原理：自己遍历集合，依次得到每一个元素，把得到的每一个元素，传递给下面的accept方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> E&gt; action)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(action);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">final</span> E[] elementData = (E[]) <span class="built_in">this</span>.elementData;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="built_in">this</span>.size;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">        action.accept(elementData[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据结构概述"><a href="#数据结构概述" class="headerlink" title="数据结构概述"></a>数据结构概述</h2><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2></li><li><p>数据结构是计算机底层存储、组织数据的方式</p></li><li><p>是指数据相互之间是以什么方式排列在一起的</p></li><li><p>数据结构是为了更加方便的管理和使用数据，需要结合具体的业务场景来进行选择</p></li><li><p>一般情况下，好的数据结构可以带来更高的运行或者存储效率</p></li></ul><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>链表中的结点是独立的对象，在内存中是不连续的，每个节点包含数据值和下一个节点的地址</p><p>链表的查询慢，因为查询哪个数据都要从头开始查找</p><h2 id="ArrayList集合"><a href="#ArrayList集合" class="headerlink" title="ArrayList集合"></a>ArrayList集合</h2><h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><ol><li>利用空参创建的集合，在底层创建一个默认长度为0的数据</li><li>添加第一个元素时，底层会创建一个新的长度为10的数组</li><li>存满时，在底层会自动的扩容1.5倍</li><li>如果一次添加多个元素，1.5倍放不下，则新创建数据的长度以实际为准</li></ol><h2 id="LinkedList集合"><a href="#LinkedList集合" class="headerlink" title="LinkedList集合"></a>LinkedList集合</h2><h3 id="底层原理-1"><a href="#底层原理-1" class="headerlink" title="底层原理"></a>底层原理</h3><p>底层数据结构是双链表，查询慢，首尾操作的速度是极快的</p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="泛型的好处"><a href="#泛型的好处" class="headerlink" title="泛型的好处"></a>泛型的好处</h3><ul><li>统一数据类型</li><li>把运行时期的问题提前到了编译期间，避免了强制类型转换可能出现的异常，因为在编译阶段类型就能确定下来</li></ul><h3 id="泛型的细节"><a href="#泛型的细节" class="headerlink" title="泛型的细节"></a>泛型的细节</h3><ul><li>泛型中不能写基本数据类型</li><li>指定泛型的具体类型后，传递数据时，可以传入该类类型或者子类类型</li><li>如果不写泛型，类型默认是Object</li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><h5 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h5><ul><li>当一个类中，某个变量的数据类型不确定时，就可以定义带有泛型的类</li></ul><h5 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h5><ul><li>方法中形参类型不确定时，可以使用类名后面定义的泛型方法</li><li>使用类名后面定义的泛型，所有方法都能使用</li><li>在方法申明上定义自己的泛型，只有本方法能用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符&lt;类型&gt; 返回值类型 方法名 (类型 变量名)</span><br></pre></td></tr></table></figure><h5 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h5><ul><li>当一个接口中类型不确定的时候，就可以使用泛型接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 interface 接口名 &lt;类型&gt;&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="泛型的继承和通配符"><a href="#泛型的继承和通配符" class="headerlink" title="泛型的继承和通配符"></a>泛型的继承和通配符</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?  表示不确定的类型，也可以进行类型的确定</span><br><span class="line">?  extend E:  表示可以传递E或者E所有的子类类型</span><br><span class="line">? <span class="built_in">super</span> E： 表示可以传递E或者E所有的父类类型</span><br></pre></td></tr></table></figure><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h4 id="基本常识"><a href="#基本常识" class="headerlink" title="基本常识"></a>基本常识</h4><ul><li>度：每一个节点的子节点数量</li><li>树高：树的总层数</li><li>根节点：最顶层的节点</li><li>左子节点：左下方的节点</li><li>右子节点：右下方的节点</li></ul><h4 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h4><p>二叉查找树又称为二叉排序树或者二叉搜索树</p><p>特点：</p><ul><li>每一个节点上最多有两个子节点</li><li>任意节点左子树上的值都小于当前节点</li><li>任意节点右子树上的值都大于当前节点</li><li>添加节点的规则：小的存左边，大的存右边，一样的不存</li></ul><p>遍历方式：</p><ul><li>前序遍历：当前 节点，左子节点、右子节点</li><li>中序遍历：左子节点，当前节点，右子节点</li><li>后序遍历：左子节点，右子节点，当前节点</li><li>层序遍历：一层一层的去遍历</li></ul><h4 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h4><p><strong>特点：任意节点左右子树高度不超过1</strong></p><p>保持为平衡二叉树的旋转机制：</p><ul><li><p>规则：</p><ul><li><p>左旋：</p><ul><li><p>确定支点：从添加的节点开始，不断的往父节点找不平衡的节点</p></li><li><p>把支点左旋降级，变成左子节点</p></li><li><p>第一种情况：</p><ul><li>晋升原来的右节点</li></ul></li><li><p>第二种情况：</p><ul><li>原先的右子节点变成新的父节点，并把多余的左子节点出让，给已经降级的根节点当右子节点</li></ul></li></ul></li><li><p>右旋：</p><ul><li>确定支点：从添加的节点开始，不断的往父节点找不平衡的节点</li><li>把支点左旋降级，变成左子节点</li><li>第一种情况：<ul><li>晋升原来的左节点</li></ul></li><li>第二种情况：<ul><li>原先的左子节点变成新的父节点，并把多余的右子节点出让，给已经降级的根节点当左子节点</li></ul></li></ul></li></ul></li><li><p>触发时机：当添加一个节点之后，该数不再是一颗平衡二叉树</p></li></ul><p>平衡二叉树需要旋转的四种情况</p><ul><li>左左：一次右旋</li><li>左右：先局部左旋，在整体右旋</li><li>右右：一次左旋</li><li>右左：先局部右旋，再整体左旋</li></ul><h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><p>特点：</p><ul><li>红黑树是一种自平衡的二叉查找树，它是一种特殊的二叉查找树，红黑树的每一个节点上都有存储位表示节点的颜色</li><li><strong>每一个节点可以是红或者黑</strong>，红黑树<strong>不是高度平衡的</strong>，它的平衡是通过”<strong>红黑规则</strong>“进行实现的</li></ul><p>红黑规则：</p><ul><li><p>每一个节点或是红色的，或者是黑色的</p></li><li><p>根节点必须是黑色的</p></li><li><p>如果一个节点没有子节点或者父节点，则该节点相应的指针属性为Nil，这些几点视为叶节点，每个叶节点(Nil)是黑色的</p></li><li><p>如果一个节点是红色的，那么他的子节点必须是黑色的（不能出现两个红色节点相连的情况）</p></li><li><p>对每一个节点，从该节点到其他所有后代叶节点的简单路径上，均包含相同数目的黑色节点</p><blockquote><p>简单路径：只能往前，不能回头</p></blockquote></li></ul><p>添加节点的规则</p><ul><li><p>默认颜色：添加节点默认是红色的（效率高）</p><p><strong><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230304140415494.png" alt="image-20230304140415494"></strong></p></li></ul><p><strong>红黑树的增删改查的性能很好</strong></p><h2 id="2、Set系列的集合"><a href="#2、Set系列的集合" class="headerlink" title="2、Set系列的集合"></a>2、Set系列的集合</h2><p>特点：</p><ul><li>无序：存取顺序不一致</li><li>不重复：可以去除重复</li><li>无索引：没有带索引的方法，所以不能使用普通的for方法循环遍历，也不能通过索引来获取元素</li></ul><h3 id="set集合的实现类"><a href="#set集合的实现类" class="headerlink" title="set集合的实现类"></a>set集合的实现类</h3><ul><li>HashSet：无序、不重复、无索引</li><li>LinkedHashSet：有序、不重复、无索引</li><li>TreeSet：可排序、不重复、无索引</li></ul><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>HashSet集合底层采取<strong>哈希表</strong>存储数据</p><p>哈希表是一种对于增删改查数据性能都很好的结构，哈希值是哈希表中重要的部分</p><h5 id="哈希值"><a href="#哈希值" class="headerlink" title="哈希值"></a>哈希值</h5><h6 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h6><ul><li>根据hashCode方法算出来的int类型的整数</li><li>该方法定义在Object类中，所有对象都可以调用，默认使用地址值进行计算</li><li>一般情况下，会重写hashCode方法，利用对象内部的属性值计算哈希值</li></ul><h6 id="对象的哈希值特点"><a href="#对象的哈希值特点" class="headerlink" title="对象的哈希值特点"></a>对象的哈希值特点</h6><ul><li>如果没有重写hashCode方法，不同对象计算出的哈希值是不同的</li><li>已经重写了hashCode方法，不同对象的属性值相同，计算出的哈希值就是一样的</li><li>在小部分下，不同的属性值或者不同的地址值计算出来的哈希值也有可能一样（哈希碰撞）</li></ul><p>哈希表的组成：</p><ul><li>jdk8之前：数组+链表</li><li>JDK8开始：数组+链表+红黑树</li></ul><h5 id="hashSet底层原理"><a href="#hashSet底层原理" class="headerlink" title="hashSet底层原理"></a>hashSet底层原理</h5><ul><li>创建一个默认长度16，默认加载因为0.75的数组，数组名为table</li><li>根据元素的哈希值跟数组的长度计算出应存入的位置</li><li>判断当前位置是否为null，如果是null直接存入</li><li>如果位置不为null，表示有元素，则调用equals方法比较属性值</li><li>一样：不存   不一样：存入数组，形成链表<ul><li>jdk8以前：新元素存入数组，老元素挂在新元素下面</li><li>jdk8以后：新元素直接挂在老元素下面</li></ul></li></ul><blockquote><p>注意：JDK8以后，当链表长度超过8，而且数组长度大于等于64时，自动转换为红黑树</p><p>如果集合中存储的是自定义对象，必须重写hashCode和equals方法</p></blockquote><h5 id="hashSet中五个常见的问题"><a href="#hashSet中五个常见的问题" class="headerlink" title="hashSet中五个常见的问题"></a>hashSet中五个常见的问题</h5><ul><li>HashSet集合的底层数据结构是什么样子的？<ul><li>数组 + 链表 + 红黑树</li></ul></li><li>HashSet添加元素的过程<ul><li>先根据元素的哈希值计算出元素要存入的位置，然后判断该位置是否为null，如果为null就直接存入，不为null就直接挂在老元素的下面</li></ul></li><li>HashSet为什么存和取的顺序不一样<ul><li>因为不同的元素的哈希值是不一样的，而且同一个位置上可能是链表，红黑树等等</li></ul></li><li>HashSet为什么没有索引<ul><li>因为HashSet的底层是数组+链表+红黑树，所以不好规定索引</li></ul></li><li>HashSet是利用什么机制保证去重的<ul><li>利用hashCode() 和 equals()</li></ul></li></ul><h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><ul><li><strong>有序</strong>、不重复、无索引<ul><li>这里的有序指的是保证存储和取出的元素顺序一致</li></ul></li></ul><h5 id="底层原理-2"><a href="#底层原理-2" class="headerlink" title="底层原理"></a>底层原理</h5><p>底层数据结构依然是哈希表，<strong>只是每个元素又额外的多了一个双链表的机制记录存储的顺序</strong></p><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><ul><li>不重复、无索引、可排序</li><li>可排序：按照元素的默认规则（由小到大）排序</li><li>TreeSet集合底层是基于<strong>红黑树的数据结构</strong>实现排序的，增删改查性能都好</li></ul><h4 id="排序的默认规则"><a href="#排序的默认规则" class="headerlink" title="排序的默认规则"></a>排序的默认规则</h4><ul><li>对于数值类型：Integer、Double，默认按照从小到大的顺序进行排序</li><li>对于字符、字符串：按照字符在ASCII码表中的数字升进行排序</li></ul><h4 id="TreeSet的两种比较方式"><a href="#TreeSet的两种比较方式" class="headerlink" title="TreeSet的两种比较方式"></a>TreeSet的两种比较方式</h4><ul><li>默认排序&#x2F;自然排序：JavaBean类实现Comparable接口指定比较规则</li><li>比较器排序：创建TreeSet对象时候，传递比较器Comparator指定规则</li><li>默认使用第一种，如果第一种不能满足当前需求，就是用第二种</li></ul><h2 id="双列集合"><a href="#双列集合" class="headerlink" title="双列集合"></a>双列集合</h2><h3 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h3><ul><li>双列集合一次需要存一对数据，分别为键和值</li><li>键不能重复，值可以重复</li><li>键和值是一一对应的，每一个键只能找到自己对应的值</li><li>键 + 值这个 整体称为键值对或者键值对对象，在java中叫做”Entry对象”</li></ul><h3 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h3><p>Map集合是双列集合的顶层接口，它的功能是全部双列集合都可以继承使用的</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230305171224338.png" alt="image-20230305171224338"></p><ul><li><p>获取所有的键：Map.keySet() –&gt;对应一个set集合</p></li><li><p>获取所有的值：Map.get()  —&gt;对应一个set集合</p></li><li><p>获取所有的键值对象：map.entrySet() —&gt;对应一个set集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Map.Entry&lt;K,V&gt;&gt; entries = map.entrySet();</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;k,V) entry : entries)&#123;</span><br><span class="line">    entry.getKey();</span><br><span class="line">    entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul><li><p>HashMap是Map中的一个实现类</p></li><li><p>没有额外需要学习的特有方法，直接使用Map里面的方法就可以了</p></li><li><p>特点都是有键决定的：无序、不重复、无索引</p></li><li><p>HashMap更HashSet底层原理是一模一样的，都是哈希表结构</p></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>HashMap依赖hashCode和equals方法保证键的唯一</li><li>如果键存储的是自定义对象，需要重写hashCode和equals方法，如果值存储自定义对象，不需要重写hashCode和equals方法</li></ul><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><h4 id="特点-4"><a href="#特点-4" class="headerlink" title="特点"></a>特点</h4><ul><li>有键决定：有序、不重复、无索引</li><li>有序是指定是保证存储和取出的元素顺序一致</li><li>原理：底层数据结构是哈希表，只是每个键值对元素额外多了一个双链表的机制记录的顺序</li></ul><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><h4 id="特点-5"><a href="#特点-5" class="headerlink" title="特点"></a>特点</h4><ul><li>TreeMap跟TreeSet底层原理一样，都是红黑树结构</li><li>有键决定特性：不重复、无索引、可排序</li><li>可排序：对键进行排序</li><li>默认按照键的从小到大进行排序，也可以自己规定键的排序规则</li></ul><h4 id="两种排序规则"><a href="#两种排序规则" class="headerlink" title="两种排序规则"></a>两种排序规则</h4><ul><li>实现Comparable接口，指定比较规则</li><li>创建集合是传递Comparator比较器对象，指定比较规则</li></ul><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author: 咸余杨</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArgsDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 1.可变参数本质上就是一个数组</span></span><br><span class="line"><span class="comment">    * 2、作用：在形参中接收多个数据</span></span><br><span class="line"><span class="comment">    * 3、格式：数据类型...参数</span></span><br><span class="line"><span class="comment">    * 4、注意事项：</span></span><br><span class="line"><span class="comment">    *   形参列表中可变参数只能有一个</span></span><br><span class="line"><span class="comment">    *   可变参数必须放在形参列表的最后面*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        git01(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line">        git02(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">git01</span><span class="params">(<span class="type">int</span> ...arg)</span> &#123;</span><br><span class="line">        System.out.println(Arrays.toString(arg));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">git02</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> ...arg)</span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(Arrays.toString(arg));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><ul><li>java.util.Collections：是集合工具类</li><li>作用：Collections不是集合，而是集合的工具类</li></ul><p>常用的API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">addAll</span> <span class="params">(Collection&lt;T&gt; c,T...elements)</span> 批量添加元素</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shuffle</span><span class="params">(List&lt;?&gt; list)</span>  打乱List集合元素的顺序 </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(List&lt;T&gt; list)</span>  排序</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(List&lt;T&gt; list,Comparator)</span>  根据指定的规则进行排序</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(List&lt;T&gt; list,T key)</span>  以二分查找法查找元素</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(List&lt;T&gt; dest,List&lt;T&gt; src)</span>  拷贝集合中的元素</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">int</span> <span class="title function_">fill</span><span class="params">(List&lt;T&gt; list,T obj)</span>  使用指定的元素填充集合</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> max/min(Collection&lt;T&gt; coll)  根据默认的自然排序获取最大/最小值</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(List&lt;?&gt; list,<span class="type">int</span> i,<span class="type">int</span> j)</span>  交换集合中指定位置的元素</span><br></pre></td></tr></table></figure><h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">单列集合  <span class="keyword">default</span> Stream&lt;E&gt; <span class="title function_">stream</span><span class="params">()</span>    Collections中默认的方法</span><br><span class="line">双列集合  无                无法直接使用Stream流</span><br><span class="line">数组    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Stream&lt;T&gt; <span class="title function_">stream</span><span class="params">(T[] array)</span>   Arrays工具类中的静态方法</span><br><span class="line">一堆零散数据  <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Stream&lt;T&gt; <span class="title function_">of</span><span class="params">(T.... values)</span>     Stream接口中的静态方法</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;T&gt; <span class="title function_">filter</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> T&gt; pedicate)</span>   过滤</span><br><span class="line">Stream&lt;T&gt; <span class="title function_">limit</span><span class="params">(<span class="type">long</span> maxSize)</span>    获取前几个元素</span><br><span class="line">Stream&lt;T&gt; <span class="title function_">skip</span><span class="params">(<span class="type">long</span> n)</span>       跳过前几个元素</span><br><span class="line">Stream&lt;T&gt; <span class="title function_">distinct</span><span class="params">()</span>         元素去重，依赖(hashCode和equals方法)</span><br><span class="line"><span class="keyword">static</span> &lt;T&gt; Stream&lt;T&gt; <span class="title function_">concat</span><span class="params">(Stream a,Stream b)</span>     合并a和b两个流为一个流</span><br><span class="line">    </span><br><span class="line">Stream&lt;R&gt; map&lt;Function&lt;T,R&gt; mapper)     转换流中的数据类型</span><br><span class="line">    注意：当map方法执行完毕之后，流上的数据就变成了R类型的数据</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="string">&quot;张无忌-18&quot;</span>,<span class="string">&quot;周芷若-17&quot;</span>,<span class="string">&quot;赵敏-16&quot;</span>,<span class="string">&quot;张小强-19&quot;</span>,<span class="string">&quot;张嘴哦-20&quot;</span>,<span class="string">&quot;张良-25&quot;</span>,<span class="string">&quot;王二麻子-28&quot;</span>,<span class="string">&quot;谢广艳-50&quot;</span>,<span class="string">&quot;礼品顺-40&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        list.stream()</span></span><br><span class="line"><span class="comment">//                .skip(1)</span></span><br><span class="line"><span class="comment">//                .filter(s -&gt; s.startsWith(&quot;张&quot;))</span></span><br><span class="line"><span class="comment">//                .limit(7)</span></span><br><span class="line"><span class="comment">//                .forEach(s -&gt; System.out.println(s));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        list.stream()</span></span><br><span class="line"><span class="comment">//                .map(new Function&lt;String, Integer&gt;() &#123;</span></span><br><span class="line"><span class="comment">//                    @Override</span></span><br><span class="line"><span class="comment">//                    public Integer apply(String s) &#123;</span></span><br><span class="line"><span class="comment">//                        String[] split = s.split(&quot;-&quot;);</span></span><br><span class="line"><span class="comment">//                        String s1 = split[1];</span></span><br><span class="line"><span class="comment">//                        Integer age = Integer.parseInt(s1);</span></span><br><span class="line"><span class="comment">//                        return age;</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"><span class="comment">//                &#125;).forEach(s -&gt; System.out.println(s));</span></span><br><span class="line"></span><br><span class="line">        list.stream()</span><br><span class="line">                .map(s -&gt; Integer.parseInt(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>]))</span><br><span class="line">                .forEach(s -&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意1：中间方法，返回新的Stream流，原来的Stream流只能使用一次，建议使用链式编程</p><p>注意2：修改Stream流中的数据，不会影响原来集合或者数组中的数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Stream流中的终结方法</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer action)</span>      遍历</span><br><span class="line">    <span class="type">long</span> <span class="title function_">count</span><span class="params">()</span>            统计</span><br><span class="line">    toArray()          收集流中的数据，放到数组中</span><br><span class="line">    collect(Collector collector)    收集流中的数据，放到集合中 （List Set Map） </span><br><span class="line">    注意：如果要把数据收集到Map集合当中，键不能重复，否则程序会出错</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">// Consumer的泛型，表示流中数据的类型</span></span><br><span class="line">        <span class="comment">// accept方法的形参s：依次表示流里面的每一个数据</span></span><br><span class="line">        <span class="comment">// 方法体：对每一个数据的处理操作进行打印</span></span><br><span class="line">        list.stream().forEach(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">                *IntFunction中的放泛型：具体类型的数据</span></span><br><span class="line"><span class="comment">                * apply的形参：六中数据的个数，要跟数据的长度保持一致</span></span><br><span class="line"><span class="comment">                * apply的返回值：具体类型的数据</span></span><br><span class="line"><span class="comment">                * 方法体：就是创建数据 </span></span><br><span class="line"><span class="comment">                .toArray(new IntFunction&lt;? extends Object[]&gt;() &#123;</span></span><br><span class="line"><span class="comment">                    @Override</span></span><br><span class="line"><span class="comment">                    public Object[] apply(int value) &#123;</span></span><br><span class="line"><span class="comment">                        return new Object[0];</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;)*/</span></span><br><span class="line"><span class="comment">// toArray方法参数的作用：负责创建一个指定；类型的数据</span></span><br><span class="line">list.stream().toArray(<span class="keyword">new</span> <span class="title class_">IntFunction</span>&lt;String[]&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> String[] apply(<span class="type">int</span> value) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[value];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">list.stream().toArray(value -&gt; <span class="keyword">new</span> <span class="title class_">String</span>[value]);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="string">&quot;张无忌-男-18&quot;</span>,<span class="string">&quot;周芷若-女-17&quot;</span>,<span class="string">&quot;赵敏-女-16&quot;</span>,<span class="string">&quot;张小强-男-19&quot;</span>,</span><br><span class="line">                <span class="string">&quot;张嘴哦-男-20&quot;</span>,<span class="string">&quot;张良-女-25&quot;</span>,<span class="string">&quot;王二麻子-男-28&quot;</span>,<span class="string">&quot;谢广艳-女-50&quot;</span>,<span class="string">&quot;礼品顺-男-40&quot;</span>);       </span><br><span class="line">Map&lt;String, Integer&gt; map = list.stream()</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * toMap中的参数</span></span><br><span class="line"><span class="comment">                 * 参数一：</span></span><br><span class="line"><span class="comment">                 *           Function泛型一：表示流中每一个数据类型</span></span><br><span class="line"><span class="comment">                 *                   泛型二：表示Map集合中键的数据类型</span></span><br><span class="line"><span class="comment">                 *              方法apply形参：依次表示流里面的每一个数据</span></span><br><span class="line"><span class="comment">                 *                   方法体：生成键的代码</span></span><br><span class="line"><span class="comment">                 *                   返回值：已经生成的键</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 * 参数一：</span></span><br><span class="line"><span class="comment">                 *           Function泛型一：表示流中每一个数据类型</span></span><br><span class="line"><span class="comment">                 *            泛型二：表示Map集合中值的数据类型</span></span><br><span class="line"><span class="comment">                 *              方法apply形参：依次表示流里面的每一个数据</span></span><br><span class="line"><span class="comment">                 *                   方法体：生成值的代码</span></span><br><span class="line"><span class="comment">                 *                   返回值：已经生成的值</span></span><br><span class="line"><span class="comment">                 *  */</span></span><br><span class="line">                .filter(s -&gt; <span class="string">&quot;男&quot;</span>.equals(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>]))</span><br><span class="line">                .collect(Collectors.toMap(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;String, String&gt;() &#123;</span><br><span class="line">                                              <span class="meta">@Override</span></span><br><span class="line">                                              <span class="keyword">public</span> String <span class="title function_">apply</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                                                  <span class="keyword">return</span> s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">                                              &#125;</span><br><span class="line">                                          &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Function</span>&lt;String, Integer&gt;() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="keyword">public</span> Integer <span class="title function_">apply</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                                <span class="keyword">return</span> Integer.parseInt(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">2</span>]);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;));</span><br><span class="line"><span class="comment">// Lambda表达式</span></span><br><span class="line">        list.stream()</span><br><span class="line">                .filter(s -&gt; <span class="string">&quot;男&quot;</span>.equals(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>])) </span><br><span class="line">                .collect(Collectors.toMap(</span><br><span class="line">                        s -&gt; s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">0</span>],</span><br><span class="line">                        s -&gt; Integer.parseInt(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">2</span>])</span><br><span class="line">                ));</span><br></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>Stream的使用步骤<ul><li>获取Stream流对象</li><li>使用中间方法处理数据</li><li>使用终结方法处理数据</li></ul></li><li>如何获取Stream流对象<ul><li>单列集合：Collection中默认方法stream</li><li>双列集合：不能直接获取</li><li>数组：Arrays工具类型中的静态方法stream</li><li>一堆零散的数据：Sream接口中的静态方法of</li></ul></li><li>常见方法<ul><li>中间方法：filter，limit，skip，distinct，concat，map</li><li>终结方法：forEach，count，collect</li></ul></li></ul><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><ul><li>把已有的方法拿过来使用，当做函数式接口中抽象方法的方法体就叫方法引用</li><li>已有的方法可以是java已经写好的，也可以是一些第三方的工具类</li><li>引用处必须是函数式接口</li><li>被引用的方法必须已经存在</li><li>被引用方法的形参和返回值需要跟抽象方法保持一致</li><li>被引用的方法功能要满足当前需求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">::  ---&gt; 方法引用符号</span><br></pre></td></tr></table></figure><h3 id="方法引用的分类"><a href="#方法引用的分类" class="headerlink" title="方法引用的分类"></a>方法引用的分类</h3><h5 id="引用静态方法"><a href="#引用静态方法" class="headerlink" title="引用静态方法"></a>引用静态方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">格式：类名::静态方法</span><br><span class="line">范例: Integer::parseInt </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Collections.addAll(list,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>);</span><br><span class="line">    <span class="comment">/*Stream&lt;Integer&gt; integerStream = list.stream()</span></span><br><span class="line"><span class="comment">            .map(new Function&lt;String, Integer&gt;() &#123;</span></span><br><span class="line"><span class="comment">                @Override</span></span><br><span class="line"><span class="comment">                public Integer apply(String s) &#123;</span></span><br><span class="line"><span class="comment">                    return Integer.parseInt(s);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;);</span></span><br><span class="line"><span class="comment">    System.out.println(integerStream);*/</span></span><br><span class="line">    </span><br><span class="line"> <span class="comment">// parseInt是Integer 中的静态方法</span></span><br><span class="line"> <span class="comment">/*public static int parseInt(String s) throws NumberFormatException &#123;</span></span><br><span class="line"><span class="comment">    return parseInt(s,10);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">    list.stream().map(Integer::parseInt)</span><br><span class="line">            .forEach(s -&gt; System.out.println(s));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="引用成员方法"><a href="#引用成员方法" class="headerlink" title="引用成员方法"></a>引用成员方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">格式：对象::成员方法</span><br><span class="line">    其他类：其他对象::方法名</span><br><span class="line">    <span class="comment">// 静态方法中没有this，所以在静态方法中引用本类对象时要重新new一个本类的对象</span></span><br><span class="line">    本类：<span class="built_in">this</span>::方法名</span><br><span class="line">    父类：<span class="built_in">super</span>::方法名</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Collections.addAll(list, <span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;周芷若&quot;</span>, <span class="string">&quot;赵敏&quot;</span>, <span class="string">&quot;张强&quot;</span>, <span class="string">&quot;张晓人&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*        list.stream()</span></span><br><span class="line"><span class="comment">                .filter(new Predicate&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">                    @Override</span></span><br><span class="line"><span class="comment">                    public boolean test(String s) &#123;</span></span><br><span class="line"><span class="comment">                         return s.startsWith(&quot;张&quot;);</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;)</span></span><br><span class="line"><span class="comment">                .filter(new Predicate&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">                    @Override</span></span><br><span class="line"><span class="comment">                    public boolean test(String s) &#123;</span></span><br><span class="line"><span class="comment">                        return s.length() == 3;</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;).forEach(s -&gt; System.out.println(s));</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="comment">/*        list.stream()</span></span><br><span class="line"><span class="comment">                .filter(new StringJudge()::test)</span></span><br><span class="line"><span class="comment">                .forEach(s -&gt; System.out.println(s));*/</span></span><br><span class="line">        list.stream()</span><br><span class="line">                .filter(<span class="keyword">new</span> <span class="title class_">Function03</span>()::test).forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s.startsWith(<span class="string">&quot;张&quot;</span>) &amp;&amp; s.length() == <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="引用构造方法"><a href="#引用构造方法" class="headerlink" title="引用构造方法"></a>引用构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类名::<span class="keyword">new</span> </span><br><span class="line"><span class="title class_">Student</span>::<span class="keyword">new</span> </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Collections.addAll(list,<span class="string">&quot;张无忌,17&quot;</span>,<span class="string">&quot;杖面具,19&quot;</span>,<span class="string">&quot;赵玉燕,29&quot;</span>,<span class="string">&quot;博边防,20&quot;</span>,<span class="string">&quot;张三分,100&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将list集合中的数据封装成Student对象</span></span><br><span class="line">    <span class="comment">/*List&lt;Student&gt; collect = list.stream()</span></span><br><span class="line"><span class="comment">            .map(new Function&lt;String, Student&gt;() &#123;</span></span><br><span class="line"><span class="comment">                @Override</span></span><br><span class="line"><span class="comment">                public Student apply(String s) &#123;</span></span><br><span class="line"><span class="comment">                    String[] str = s.split(&quot;,&quot;);</span></span><br><span class="line"><span class="comment">                    String name = str[0];</span></span><br><span class="line"><span class="comment">                    String age = str[1];</span></span><br><span class="line"><span class="comment">                    return new Student(name, Integer.parseInt(age));</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;).collect(Collectors.toList());</span></span><br><span class="line"><span class="comment">    System.out.println(collect);*/</span></span><br><span class="line">    list.stream()</span><br><span class="line">            .map(Student::<span class="keyword">new</span>)</span><br><span class="line">            .forEach(s -&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, String age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        String[] s = str.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = s[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">this</span>.age = s[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(String age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&#x27;&quot;</span> + age + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他的调用方式"><a href="#其他的调用方式" class="headerlink" title="其他的调用方式"></a>其他的调用方式</h4><ul><li><p>使用类名引用成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">要求：<span class="number">1</span>、需要有函数式接口</span><br><span class="line">    <span class="number">2</span>、被引用的方法必须已经存在</span><br><span class="line">    <span class="number">3</span>、被引用方法的形参，需要跟抽象方法的第二个形参到最后一个形参保持一致，返回值需要保持一致</span><br><span class="line">    <span class="number">4</span>、被引用的方法的功能需要满足当前的需求</span><br><span class="line">    抽象方法形参的详解：</span><br><span class="line">    第一个参数：表示被引用方法的调用者，决定了可以引用哪些类中的方法</span><br><span class="line">    在Stream流中，第一个参数一般都是表示流里面的每一个数据</span><br><span class="line">    假设流里面的数据是字符串，那么使用这种方式进行方法引用，只能引用String这个类中的方法</span><br><span class="line">    第二个参数到最后一个参数：跟被引用方法的形参保持一致，如果没有第二个参数，说明被引用的方法需要是无参的成员方法</span><br><span class="line">    局限性：</span><br><span class="line">    不能引用所有类中的成员方法</span><br><span class="line">    是跟抽象方法的第一个形参有关，这个参数是什么类型的，那么就只能引用这个类中的方法</span><br><span class="line">    </span><br><span class="line">格式:  类名::成员方法</span><br><span class="line">       示例: String::subString</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       Collections.addAll(list,<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;ccc&quot;</span>,<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">  </span><br><span class="line">       <span class="comment">/*list.stream()</span></span><br><span class="line"><span class="comment">               .map(new Function&lt;String, String&gt;() &#123;</span></span><br><span class="line"><span class="comment">                   @Override</span></span><br><span class="line"><span class="comment">                   public String apply(String s) &#123;</span></span><br><span class="line"><span class="comment">                       return s.toUpperCase();</span></span><br><span class="line"><span class="comment">                   &#125;</span></span><br><span class="line"><span class="comment">               &#125;).forEach(s -&gt; System.out.println(s));*/</span></span><br><span class="line">       list.stream()</span><br><span class="line">               <span class="comment">// map(String::toUpperCase)：拿着流里面的每一个数据，</span></span><br><span class="line">               <span class="comment">// 去调用String类中的toUpperCase方法，方法的返回值就是转换之后的结果</span></span><br><span class="line">               .map(String::toUpperCase)</span><br><span class="line">               .forEach(s -&gt; System.out.println(s));</span><br></pre></td></tr></table></figure></li><li><p>引用数据的构造方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">格式：数据类型[]::<span class="keyword">new</span> </span><br><span class="line"> 示例：<span class="type">int</span>[]::<span class="keyword">new</span> </span><br><span class="line"> 细节：数组的类型，需要跟流中数据的类型保持一致</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Collections.addAll(list,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Integer[] array = list.stream()</span></span><br><span class="line"><span class="comment">            .toArray(new IntFunction&lt;Integer[]&gt;() &#123;</span></span><br><span class="line"><span class="comment">                @Override</span></span><br><span class="line"><span class="comment">                public Integer[] apply(int value) &#123;</span></span><br><span class="line"><span class="comment">                    return new Integer[value];</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;);</span></span><br><span class="line"><span class="comment">    System.out.println(Arrays.toString(array));*/</span></span><br><span class="line">    Integer[] array = list.stream()</span><br><span class="line">            .toArray(Integer[]::<span class="keyword">new</span>);</span><br><span class="line">    System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法引用的技巧"><a href="#方法引用的技巧" class="headerlink" title="方法引用的技巧"></a>方法引用的技巧</h3><ul><li><p>现在有没有一个方法符合我当前的需求</p></li><li><p>如果有这样的的方法，这个方法是否满足引用的规则</p><ul><li>静态：   类名::方法名</li><li>成员方法   super</li><li>构造方法    类名::new</li></ul></li></ul><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="介绍：-1"><a href="#介绍：-1" class="headerlink" title="介绍："></a>介绍：</h3><ul><li>Exception：叫做异常，代表程序可能出现的问题，我们通常会用Exception以及它的子类来封装程序出现的问题</li><li>RuntimeException及其子类，编译阶段不会出现异常提醒。运行时出现的异常（如：数组索引越界异常）</li><li>编译时异常：编译阶段就会出现异常提醒。（如：日期解析异常）</li><li><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230310103623202.png" alt="image-20230310103623202"></li></ul><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li>编译时异常和运行时异常的区别？<ul><li>编译时异常：没有继承RuntimeException的异常，直接继承与Exception，编译阶段就会报错误，就会提醒程序员</li><li>运行时异常：RuntimeException本身和子类，编译阶段没有错误提示，运行时出现的</li></ul></li></ul><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230310104114567.png" alt="image-20230310104114567"></p><h3 id="异常的作用"><a href="#异常的作用" class="headerlink" title="异常的作用"></a>异常的作用</h3><ul><li>异常是用来查询bug的关键参考信息</li><li>异常可以作为方法内部的一种特殊返回值，以便通知调用者底层的执行情况</li></ul><h3 id="异常的处理方式"><a href="#异常的处理方式" class="headerlink" title="异常的处理方式"></a>异常的处理方式</h3><ul><li><p>JVM默认的处理方式</p><ul><li>把异常的名称，异常的原因及异常出现的位置等信息输出在了控制台</li><li>程序停止执行，下面的代码不会再执行了</li></ul></li><li><p>自己捕获异常</p><ul><li>~~~java<br>格式<br>try {<br>    可能出现异常的代码;<br>} catch(异常类名 变量名) {<br>    异常的处理代码;<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 目的：当代码出现异常的时候，可以让程序继续往下执行</span><br><span class="line"></span><br><span class="line">  - 如果我们要捕获多个异常，这些异常中如果存在父子关系的话，那么父类一定要写在下面</span><br><span class="line"></span><br><span class="line">  - 在jdk7之后，我们可以在catch中同时捕获多个异常，中间用|进行隔开，表示如果出现了A异常或者B异常的话，采取同一种处理方案 </span><br><span class="line"></span><br><span class="line">#### 异常中常见的方法</span><br><span class="line"></span><br><span class="line">- Throwable的成员方法</span><br><span class="line"></span><br><span class="line">  - ~~~java</span><br><span class="line">    public String getMessage()      // 返回throwable的详细消息字符串</span><br><span class="line">    public String toString()        // 返回此可抛出的简短描述</span><br><span class="line">    public void printStackTrace()   // 把异常的错误信息输出在控制台，不会停止程序的运行</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h4><ul><li><p>throws</p><blockquote><p>写在方法定义处，表示声明一个异常告诉调用者，使用本方法可能会有哪些异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 方法() <span class="keyword">throws</span> 异常类名<span class="number">1</span>，异常类名<span class="number">2.</span>..&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编译时异常，必须要写</span></span><br><span class="line"><span class="comment">// 运行时异常：可以不写</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>throw</p><blockquote><p>写在方法内，结束方法，手动抛出异常对象，交给调用者，方法中下面的代码不再执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 方法() &#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><ul><li>定义异常类（类名要见名知意）</li><li>写继承关系<ul><li>运行时：继承RuntimeException   表示由于参数错误而导致的问题</li><li>编译时：继承Exception  提醒程序员检查本地信息</li></ul></li><li>空参构造</li><li>带参构造</li></ul><p>意义：<strong>就是为了让控制台的报错信息更加的见名知意</strong></p><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li><p>File对象就表示一个路径，可以是文件的路径、也可以是文件夹的路径，这个路径可以是存在的，也允许是不存在的</p></li><li><p>~~~java<br>public File(String pathname)   根据文件路径创建文件对象<br>public File(String parent,Sting child)   根据父路径名字符串和子路径名字符串创建文件对象<br>public File(File parent,String child)    根据父路径对应文件对象和子路径名字符串创建文件对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 绝对路径和相路径的区别</span><br><span class="line"></span><br><span class="line">  - ~~~java</span><br><span class="line">    绝对路径是带盘符的</span><br><span class="line">        相对路径是不带盘符的，默认到当前项目下去找</span><br></pre></td></tr></table></figure></li></ul><h3 id="File中的成员方法（判断、获取）"><a href="#File中的成员方法（判断、获取）" class="headerlink" title="File中的成员方法（判断、获取）"></a>File中的成员方法（判断、获取）</h3><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230310133453563.png" alt="image-20230310133453563"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//细节：</span></span><br><span class="line">    <span class="comment">/*该方法只能获取文件的大小、单位是字节</span></span><br><span class="line"><span class="comment">    如果单位我们要是M,G，可以不断的除以1024</span></span><br><span class="line"><span class="comment">    该方法无法获取文件夹的大小</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">length</span><span class="params">()</span>   </span><br></pre></td></tr></table></figure><h3 id="成员方法的创建、删除"><a href="#成员方法的创建、删除" class="headerlink" title="成员方法的创建、删除"></a>成员方法的创建、删除</h3><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230310135534634.png" alt="image-20230310135534634"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">createNewFile()使用细节：</span><br><span class="line">    <span class="number">1</span>、如果当前路径表示的文件是不存在的，则创建成功，方法返回<span class="literal">true</span></span><br><span class="line">    <span class="number">2</span>、如果当前路径表示的文件是存在的，则创建失败，方法返回<span class="literal">false</span></span><br><span class="line">    <span class="number">3</span>、如果父级路径不存在，方法就会报出异常</span><br><span class="line">    <span class="number">4</span>、如果createNewFile方法创建的一定是文件，如果路径中不包含后缀名，则创建一个没有后缀名的文件</span><br><span class="line">    </span><br><span class="line">mkdir （make Directory 文件夹（目录））</span><br><span class="line">    使用细节：</span><br><span class="line">    <span class="number">1</span>、windows当中路径是唯一的，如果当前路径已经存在，则创建失败，返回<span class="literal">false</span></span><br><span class="line">    <span class="number">2</span>、mkdir方法只能创建单级文件夹，无法创建多级文件夹</span><br><span class="line">    </span><br><span class="line">delete：使用细节：</span><br><span class="line">    <span class="number">1</span>、如果删除的是文件，则直接删除，不走回收站</span><br><span class="line">    <span class="number">2</span>、如果删除的是空文件夹，也是直接删除，不走回收站</span><br><span class="line">    <span class="number">3</span>、如果删除的是有内容的文件夹，则删除失败</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="成员方法（获取并遍历）"><a href="#成员方法（获取并遍历）" class="headerlink" title="成员方法（获取并遍历）"></a>成员方法（获取并遍历）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> File[] listFiles()    获取当前该路径下所有内容</span><br><span class="line">    使用细节：</span><br><span class="line">    <span class="number">1</span>、当调用者file表示的路径不存在或者是文件是，返回<span class="literal">null</span></span><br><span class="line">    <span class="number">2</span>、当调用者File表示的路径是一个空文件夹时，返回一个长度为<span class="number">0</span>的数组</span><br><span class="line">    <span class="number">3</span>、当调用者File表示的路径是一个有内容的文件夹是，将里面所有文件和文件夹的路径放在File数组中返回</span><br><span class="line">    <span class="number">4</span>、当调用者File表示的路径是一个有隐藏文件的文件夹时，将里面所有文件的文件夹的路径放在File数组中返回，包含隐藏文件</span><br><span class="line">    <span class="number">5</span>、当调用者File表示的路径是需要权限才能访问的文件夹时，返回<span class="literal">null</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> File[] listRoots()   获取息肉中所有的盘符</span><br></pre></td></tr></table></figure><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>用于读写文件中的数据（可以读写文件，或网络中的数据…）</p><h3 id="IO分类"><a href="#IO分类" class="headerlink" title="IO分类"></a>IO分类</h3><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230310182659323.png" alt="image-20230310182659323"></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230310182813558.png" alt="image-20230310182813558"></p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li><p>什么是IO流</p><p>存储和读取数据的解决方案</p></li><li><p>IO流的作用</p><p>用于读写数据</p></li><li><p>IO流按照流向可以分类哪两种流</p><p>输出流：程序 —-&gt;  文件</p><p>输入流：文件 —-&gt;  程序</p></li><li><p>IO流按照操作文件的类型可以分类哪两种流</p><p>字节流：可以操作所有的类型的文件</p><p>字符流：只能操作纯文本文件</p></li><li><p>什么是纯文本文件</p><p>用window系统自带的记事本打开并且能读懂的文件</p></li></ul><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><h4 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h4><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230310183654978.png" alt="image-20230310183654978"></p><h4 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h4><p>作用：<strong>操作本地文件的字节输出流</strong>，可以把程序中的数据写到本地文件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">书写步骤：</span><br><span class="line">    <span class="number">1</span>、创建字节输出流对象</span><br><span class="line">    <span class="comment">// 该参数中还有一个参数，如果写false就是不能续写，true就是可以续写</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\大三下\\算法\\day01\\ag01\\a.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">    细节：<span class="number">1</span>、参数是字符串表示的路径或者是File对象都是可以的</span><br><span class="line">     <span class="number">2</span>、如果文件不存在会创建一个新的文件，但是要保证父级路径是存在的</span><br><span class="line">     <span class="number">3</span>、如果文件已存在，则会清空文件</span><br><span class="line">    <span class="number">2</span>、写数据</span><br><span class="line">    细节：</span><br><span class="line">    write方法的参数是整数，但是实际写到本地文件中的是整数ASCII上对应的字符</span><br><span class="line">    <span class="number">3</span>、释放资源</span><br><span class="line">    每次使用完流之后都要释放资源，也就是解除资源的占用</span><br></pre></td></tr></table></figure><p>写数据的三种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> b)</span>    一次写一个字节数据</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[] b)</span>   一次写一个字节数组数据</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[] b,<span class="type">int</span> off,<span class="type">int</span> len)</span>  一次写一个字节数组的部分数据</span><br></pre></td></tr></table></figure><h4 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h4><p>操作本地文件的字节输入流，可以把本地文件中的数据读取到程序中来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">书写步骤</span><br><span class="line">    <span class="number">1</span>、创建字节输入流对象</span><br><span class="line">    细节：如果文件不存在，就直接报错</span><br><span class="line">    <span class="number">2</span>、读取数据</span><br><span class="line">    细节：一次读一个字节，读出来的是数据在ASCII上对应的数字</span><br><span class="line">     读到文件末尾，read方法返回-<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="number">3</span>、释放资源</span><br></pre></td></tr></table></figure><p>循环读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 循环读取一个字节数据</span></span><br><span class="line">        <span class="type">int</span> b; <span class="comment">// 一般要定义的中间变量</span></span><br><span class="line">        <span class="keyword">while</span>((b = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println((<span class="type">char</span>)b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一次读取多个字节</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span>[] buffer)</span>      一次读取一个字节数组数据</span><br><span class="line">    注意：一次读一个字节数组的数据，每次读取会尽可能把数组装满</span><br><span class="line">    <span class="comment">// 一般是1024的整数倍 </span></span><br></pre></td></tr></table></figure><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230311102706965.png" alt="image-20230311102706965"></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230311103548176.png" alt="image-20230311103548176"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">java中编码的方法</span><br><span class="line">    </span><br><span class="line">    String类中的方法</span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] getBytes()     使用默认方式进行编码</span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[]  getBytes(String charsetName)    使用指定方式进行编码</span><br><span class="line">    </span><br><span class="line">java中解码的方法</span><br><span class="line">    String类中的方法</span><br><span class="line">    String(<span class="type">byte</span>[] bytes)      使用默认方式进行解码</span><br><span class="line">    String(<span class="type">byte</span>[] bytes,String charsetName)   使用指定方式进行解码</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230311105158216.png" alt="image-20230311105158216"></p><h3 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、创建字符输入流对象</span><br><span class="line">    构造方法</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileReader</span><span class="params">(File file)</span>     创建字符输入流关联本地文件</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileReader</span><span class="params">(String pathname)</span>    创建字符输入流关联本地文件</span><br><span class="line">    </span><br><span class="line">    细节：如果读取的文件不存在，就直接报错</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span>、读取数据</span><br><span class="line">    </span><br><span class="line">    成员方法</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">()</span>     读取数据，读到末尾返回-<span class="number">1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">char</span>[] buffer)</span>  读取多个数据，读到末尾返回-<span class="number">1</span></span><br><span class="line">    read(<span class="type">char</span>)中去读取数据的细节：读取数据，解码，强制三步合并了，把强转之后的字符放到数组当中</span><br><span class="line">    细节：按字节进行读取，遇到中文，一次读取多个字节，读取后解码，返回一个整数</span><br><span class="line">    </span><br><span class="line"><span class="number">3</span>、释放资源</span><br><span class="line">    </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1、创建对象</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;E:\\大三下\\算法\\day01\\ag01\\a.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 2、读取数据</span></span><br><span class="line"><span class="comment">//        long b;</span></span><br><span class="line"><span class="comment">//        while((b = fileReader.read()) != -1) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)b);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = fileReader.read(chars)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(chars,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3、释放资源</span></span><br><span class="line">        fileReader.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="FileWriter构造方法"><a href="#FileWriter构造方法" class="headerlink" title="FileWriter构造方法"></a>FileWriter构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">构造方法</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileWriter</span><span class="params">(File file)</span>    创建字符输出流关联本地文件</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileWriter</span><span class="params">(String pathname)</span>    创建字符输出流关联本地文件</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileWriter</span><span class="params">(File file,<span class="type">boolean</span> append)</span>    创建字符输出流关联本地文件，后面的参数是开启续写的开关</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileWriter</span><span class="params">(String pathname,<span class="type">boolean</span> append)</span>   创建字符输出流关联本地文件，后面的参数是开启续写的开关</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">成员方法</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> c)</span>   写出一个字符</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String srt)</span>   写出一个字符串</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String str,<span class="type">int</span> off,<span class="type">int</span> len)</span> 写出一个字符串的一部分</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">char</span>[] cbuf)</span>        写出一个字符数组</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">char</span>[] cbuf,<span class="type">int</span> off,<span class="type">int</span> len)</span>    写出字符数组的一部分</span><br></pre></td></tr></table></figure><h4 id="字符流原理解析"><a href="#字符流原理解析" class="headerlink" title="字符流原理解析"></a>字符流原理解析</h4><h5 id="字符输出流原理解析"><a href="#字符输出流原理解析" class="headerlink" title="字符输出流原理解析"></a>字符输出流原理解析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、创建字符输入流对象</span><br><span class="line">    底层：关联文件，并从创建缓冲区(长度为<span class="number">8192</span>的字节数组)</span><br><span class="line"><span class="number">2</span>、读取数据</span><br><span class="line">    底层：<span class="number">1</span>、判断缓冲区是否有数据可以读取</span><br><span class="line">     <span class="number">2</span>、黄崇渠没有数据：就从文件中获取数据，装到缓冲区中，每次尽可能装满缓冲区，如果文件中也没有数据了，返回-<span class="number">1</span></span><br><span class="line">     <span class="number">3</span>、缓冲区有数据：就从缓冲区中读取数据</span><br><span class="line">    空参的read方法：一次读取一个字节，遇到中文一次读多个字节，把字节解码并转换十进制返回</span><br><span class="line">    有参的read方法：把读取字节，解码，强转三步合并了，把强转之后的字符放到数组中</span><br></pre></td></tr></table></figure><p>字符输入流原理解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">成员方法</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span>    将缓冲区中的数据，刷新到本地文件中，刷新之后，还可以继续往文件中写数据</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>     释放资源/关流，断开通道，无法再往文件中写出数据</span><br><span class="line">    </span><br><span class="line">    <span class="number">1</span>、创建字符输出流对象</span><br><span class="line">    底层：在缓冲区创建一个长度为<span class="number">8192</span>的字节数组</span><br><span class="line">    <span class="number">2</span>、写数据</span><br><span class="line">    ，每次学数据的时候，都会先把数据写到缓冲区当中，如果缓冲区写满后就会自动的保存到目的地，或者手动的刷新和关流的时候</span><br><span class="line">    <span class="number">3</span>、释放资源</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="字符流和字节流的使用场景"><a href="#字符流和字节流的使用场景" class="headerlink" title="字符流和字节流的使用场景"></a>字符流和字节流的使用场景</h3><ul><li>字节流<ul><li>拷贝任意类型的文件</li></ul></li><li>字符流<ul><li>读取纯文本文件中的数据</li><li>往纯文本文件中写出数据</li></ul></li></ul><h3 id="字节流练习"><a href="#字节流练习" class="headerlink" title="字节流练习"></a>字节流练习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">文件夹和文件拷贝</span><br><span class="line">    <span class="keyword">package</span> com.yang.ag.CharSet;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author: 咸余杨</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharSetDemo04</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建数据源和目的地</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\table.image&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\照片&quot;</span>);</span><br><span class="line"></span><br><span class="line">        copyDir(src, dest);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyDir</span><span class="params">(File src, File dest)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 如果目的地文件不存在的话就新建</span></span><br><span class="line">        dest.mkdir();</span><br><span class="line"></span><br><span class="line">        File[] files = src.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">                <span class="comment">// 1、如果是文件就直接拷贝</span></span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="type">int</span> len;</span><br><span class="line">                <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">                <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(dest, file.getName()));</span><br><span class="line">                <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    fos.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">                &#125;</span><br><span class="line">                fos.close();</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 2、如果是文件夹就递归</span></span><br><span class="line">                copyDir(file, <span class="keyword">new</span> <span class="title class_">File</span>(dest, file.getName()));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//加密文件</span></span><br><span class="line"> <span class="keyword">package</span> com.yang.ag.CharSet;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author: 咸余杨</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharSetDemo05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建数据源</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\照片\\BC.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建目的地文件数据源</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\照片\\copy.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取文件</span></span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(len ^ <span class="number">10</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="高级流"><a href="#高级流" class="headerlink" title="高级流"></a>高级流</h3><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230311152953045.png" alt="image-20230311152953045"></p><h4 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h4><h5 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">BufferedInputStream</span><span class="params">(InputStream is)</span>   把基本流包装称高级流，提高读取数据的性能</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BufferedOutputStream</span><span class="params">(OutputStream OS)</span>  把基本流包装称高级流，提高写出数据的性能</span><br><span class="line">    原理：底层自带了长度为<span class="number">8192</span>的缓冲区提高性能</span><br></pre></td></tr></table></figure><h5 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">BufferedReader</span><span class="params">(Reader r)</span>      把基本流变成高级流</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BufferedWriter</span><span class="params">(Writer r)</span>       把基本流变成高级流</span><br><span class="line">    原理：底层自带了长度为<span class="number">8192</span>的缓冲区提高性能</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">字符缓冲流特有方法</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readLine</span><span class="params">()</span>      读取一行数据，遇到回车换行结束，但是不会读取回车换行符如果没有数据可读了，会返回<span class="literal">null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">newLine</span><span class="params">()</span>         跨平台换行</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 哈哈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>欢迎铁子们留言，提建议！</title>
      <link href="/comment/index.html"/>
      <url>/comment/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>我亦无他，唯手熟尔</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>archives</title>
      <link href="/archives/index.html"/>
      <url>/archives/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index-1.html"/>
      <url>/tags/index-1.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>照片</title>
      <link href="/photos/index.html"/>
      <url>/photos/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签页</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index-2.html"/>
      <url>/tags/index-2.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>说说</title>
      <link href="/shuoshuo/index.html"/>
      <url>/shuoshuo/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
